// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// label_components_6N_rcpp
IntegerVector label_components_6N_rcpp(LogicalVector flat_mask, IntegerVector dims);
RcppExport SEXP _neuroarchive_label_components_6N_rcpp(SEXP flat_maskSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type flat_mask(flat_maskSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(label_components_6N_rcpp(flat_mask, dims));
    return rcpp_result_gen;
END_RCPP
}
// poisson_disk_sample_component_rcpp
IntegerMatrix poisson_disk_sample_component_rcpp(IntegerMatrix component_vox_coords_0based, double radius_vox_sq, int component_seed);
RcppExport SEXP _neuroarchive_poisson_disk_sample_component_rcpp(SEXP component_vox_coords_0basedSEXP, SEXP radius_vox_sqSEXP, SEXP component_seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type component_vox_coords_0based(component_vox_coords_0basedSEXP);
    Rcpp::traits::input_parameter< double >::type radius_vox_sq(radius_vox_sqSEXP);
    Rcpp::traits::input_parameter< int >::type component_seed(component_seedSEXP);
    rcpp_result_gen = Rcpp::wrap(poisson_disk_sample_component_rcpp(component_vox_coords_0based, radius_vox_sq, component_seed));
    return rcpp_result_gen;
END_RCPP
}
// hrbf_atoms_rcpp
Eigen::SparseMatrix<float> hrbf_atoms_rcpp(const Eigen::Map<Eigen::MatrixXf> mask_xyz_world, const Eigen::Map<Eigen::MatrixXf> centres_xyz_world, const Eigen::Map<Eigen::VectorXf> sigma_vec_mm, std::string kernel_type, double value_threshold);
RcppExport SEXP _neuroarchive_hrbf_atoms_rcpp(SEXP mask_xyz_worldSEXP, SEXP centres_xyz_worldSEXP, SEXP sigma_vec_mmSEXP, SEXP kernel_typeSEXP, SEXP value_thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXf> >::type mask_xyz_world(mask_xyz_worldSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXf> >::type centres_xyz_world(centres_xyz_worldSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXf> >::type sigma_vec_mm(sigma_vec_mmSEXP);
    Rcpp::traits::input_parameter< std::string >::type kernel_type(kernel_typeSEXP);
    Rcpp::traits::input_parameter< double >::type value_threshold(value_thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(hrbf_atoms_rcpp(mask_xyz_world, centres_xyz_world, sigma_vec_mm, kernel_type, value_threshold));
    return rcpp_result_gen;
END_RCPP
}
// omp_encode_rcpp
Rcpp::List omp_encode_rcpp(const Eigen::Map<Eigen::VectorXd> signal_y, const Eigen::MappedSparseMatrix<double> dict_D, double residual_norm_sq_tol, int max_active_atoms_L);
RcppExport SEXP _neuroarchive_omp_encode_rcpp(SEXP signal_ySEXP, SEXP dict_DSEXP, SEXP residual_norm_sq_tolSEXP, SEXP max_active_atoms_LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type signal_y(signal_ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type dict_D(dict_DSEXP);
    Rcpp::traits::input_parameter< double >::type residual_norm_sq_tol(residual_norm_sq_tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_active_atoms_L(max_active_atoms_LSEXP);
    rcpp_result_gen = Rcpp::wrap(omp_encode_rcpp(signal_y, dict_D, residual_norm_sq_tol, max_active_atoms_L));
    return rcpp_result_gen;
END_RCPP
}
// sobel3d_magnitude_rcpp
NumericVector sobel3d_magnitude_rcpp(NumericVector vol);
RcppExport SEXP _neuroarchive_sobel3d_magnitude_rcpp(SEXP volSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vol(volSEXP);
    rcpp_result_gen = Rcpp::wrap(sobel3d_magnitude_rcpp(vol));
    return rcpp_result_gen;
END_RCPP
}
// get_openmp_threads
int get_openmp_threads();
RcppExport SEXP _neuroarchive_get_openmp_threads() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_openmp_threads());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_neuroarchive_label_components_6N_rcpp", (DL_FUNC) &_neuroarchive_label_components_6N_rcpp, 2},
    {"_neuroarchive_poisson_disk_sample_component_rcpp", (DL_FUNC) &_neuroarchive_poisson_disk_sample_component_rcpp, 3},
    {"_neuroarchive_hrbf_atoms_rcpp", (DL_FUNC) &_neuroarchive_hrbf_atoms_rcpp, 5},
    {"_neuroarchive_omp_encode_rcpp", (DL_FUNC) &_neuroarchive_omp_encode_rcpp, 4},
    {"_neuroarchive_sobel3d_magnitude_rcpp", (DL_FUNC) &_neuroarchive_sobel3d_magnitude_rcpp, 1},
    {"_neuroarchive_get_openmp_threads", (DL_FUNC) &_neuroarchive_get_openmp_threads, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_neuroarchive(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
