% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/handle.R
\name{DataHandle}
\alias{DataHandle}
\title{DataHandle Class for LNA Operations}
\description{
Represents the state during LNA read/write operations, holding
  data being transformed, metadata, the write plan (if applicable),
  HDF5 file access, and subsetting information.
}
\keyword{internal}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{stash}}{A list holding temporary data objects during transform chain.}

\item{\code{meta}}{A list holding metadata associated with the data.}

\item{\code{plan}}{A Plan object (from R/plan.R) used during write operations.}

\item{\code{h5}}{An H5File object (from hdf5r) providing access to the LNA file.}

\item{\code{subset}}{A list specifying subsetting parameters (e.g., ROI, time indices).}

\item{\code{run_ids}}{Character vector of run identifiers for multi-run data.}

\item{\code{current_run_id}}{The run identifier currently being processed.}

\item{\code{mask_info}}{List with mask array and active voxel count}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-DataHandle-new}{\code{DataHandle$new()}}
\item \href{#method-DataHandle-get_inputs}{\code{DataHandle$get_inputs()}}
\item \href{#method-DataHandle-update_stash}{\code{DataHandle$update_stash()}}
\item \href{#method-DataHandle-with}{\code{DataHandle$with()}}
\item \href{#method-DataHandle-has_key}{\code{DataHandle$has_key()}}
\item \href{#method-DataHandle-pull_first}{\code{DataHandle$pull_first()}}
\item \href{#method-DataHandle-clone}{\code{DataHandle$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataHandle-new"></a>}}
\if{latex}{\out{\hypertarget{method-DataHandle-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new DataHandle object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataHandle$new(
  initial_stash = list(),
  initial_meta = list(),
  plan = NULL,
  h5 = NULL,
  subset = list(),
  run_ids = character(),
  current_run_id = NULL,
  mask_info = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{initial_stash}}{Initial list of objects for the stash.}

\item{\code{initial_meta}}{Initial list for metadata.}

\item{\code{plan}}{A Plan object (optional, for writing).}

\item{\code{h5}}{An H5File object (optional, for reading/writing).}

\item{\code{subset}}{A list specifying subsetting (optional, for reading).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataHandle-get_inputs"></a>}}
\if{latex}{\out{\hypertarget{method-DataHandle-get_inputs}{}}}
\subsection{Method \code{get_inputs()}}{
Retrieve specified input objects from the stash.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataHandle$get_inputs(keys)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{keys}}{Character vector of keys to retrieve from the stash.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Raises an lna_error_contract if any key is not found.
}

\subsection{Returns}{
A named list containing the requested objects.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataHandle-update_stash"></a>}}
\if{latex}{\out{\hypertarget{method-DataHandle-update_stash}{}}}
\subsection{Method \code{update_stash()}}{
Update the stash with new or modified objects (immutable update).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataHandle$update_stash(keys, new_values)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{keys}}{Character vector of keys to remove from the current stash.}

\item{\code{new_values}}{Named list of new objects to add to the stash.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A *new* DataHandle object with the updated stash.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataHandle-with"></a>}}
\if{latex}{\out{\hypertarget{method-DataHandle-with}{}}}
\subsection{Method \code{with()}}{
Create a new DataHandle with modified fields (immutable update).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataHandle$with(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Named arguments corresponding to fields to update (e.g., meta = new_meta).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A *new* DataHandle object with updated fields.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataHandle-has_key"></a>}}
\if{latex}{\out{\hypertarget{method-DataHandle-has_key}{}}}
\subsection{Method \code{has_key()}}{
Check if a key exists in the stash.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataHandle$has_key(key)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{Character string, the key to check.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Logical, TRUE if the key exists in the stash, FALSE otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataHandle-pull_first"></a>}}
\if{latex}{\out{\hypertarget{method-DataHandle-pull_first}{}}}
\subsection{Method \code{pull_first()}}{
Return the first available value for a set of candidate keys.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataHandle$pull_first(keys)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{keys}}{Character vector of keys to search for in order.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List with elements `value` and `key` giving the retrieved
  object and the key that was found.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataHandle-clone"></a>}}
\if{latex}{\out{\hypertarget{method-DataHandle-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataHandle$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
