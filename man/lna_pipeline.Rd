% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pipeline.R
\name{lna_pipeline}
\alias{lna_pipeline}
\title{lna_pipeline Class}
\description{
Basic R6 class for constructing LNA pipelines. Stores input data,
pipeline steps and optional engine hints. This is an early draft
used for experimenting with a tidy DSL facade.
}
\keyword{internal}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{input}}{Data object or list of run data}

\item{\code{input_summary}}{Character summary of input dimensions}

\item{\code{runs}}{Character vector of run identifiers}

\item{\code{steps}}{List of transform step specifications}

\item{\code{engine_opts}}{Optional list of hints for core_write}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-lna_pipeline-new}{\code{lna_pipeline$new()}}
\item \href{#method-lna_pipeline-set_input}{\code{lna_pipeline$set_input()}}
\item \href{#method-lna_pipeline-add_step}{\code{lna_pipeline$add_step()}}
\item \href{#method-lna_pipeline-print}{\code{lna_pipeline$print()}}
\item \href{#method-lna_pipeline-get_steps_list}{\code{lna_pipeline$get_steps_list()}}
\item \href{#method-lna_pipeline-steps}{\code{lna_pipeline$steps()}}
\item \href{#method-lna_pipeline-get_step}{\code{lna_pipeline$get_step()}}
\item \href{#method-lna_pipeline-get_last_step_spec}{\code{lna_pipeline$get_last_step_spec()}}
\item \href{#method-lna_pipeline-modify_step}{\code{lna_pipeline$modify_step()}}
\item \href{#method-lna_pipeline-remove_step}{\code{lna_pipeline$remove_step()}}
\item \href{#method-lna_pipeline-insert_step}{\code{lna_pipeline$insert_step()}}
\item \href{#method-lna_pipeline-validate_params}{\code{lna_pipeline$validate_params()}}
\item \href{#method-lna_pipeline-diagram}{\code{lna_pipeline$diagram()}}
\item \href{#method-lna_pipeline-clone}{\code{lna_pipeline$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-lna_pipeline-new"></a>}}
\if{latex}{\out{\hypertarget{method-lna_pipeline-new}{}}}
\subsection{Method \code{new()}}{
Initialise a new lna_pipeline object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{lna_pipeline$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-lna_pipeline-set_input"></a>}}
\if{latex}{\out{\hypertarget{method-lna_pipeline-set_input}{}}}
\subsection{Method \code{set_input()}}{
Set the pipeline input and related metadata
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{lna_pipeline$set_input(x, run_ids = NULL, chunk_mb_suggestion = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{Data object or list of run data}

\item{\code{run_ids}}{Optional character vector of run identifiers}

\item{\code{chunk_mb_suggestion}}{Optional numeric hint for chunk size}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-lna_pipeline-add_step"></a>}}
\if{latex}{\out{\hypertarget{method-lna_pipeline-add_step}{}}}
\subsection{Method \code{add_step()}}{
Append a transform step specification to the pipeline
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{lna_pipeline$add_step(step_spec)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{step_spec}}{A list with elements `type` and `params`}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-lna_pipeline-print"></a>}}
\if{latex}{\out{\hypertarget{method-lna_pipeline-print}{}}}
\subsection{Method \code{print()}}{
Print a human readable summary of the pipeline
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{lna_pipeline$print(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-lna_pipeline-get_steps_list"></a>}}
\if{latex}{\out{\hypertarget{method-lna_pipeline-get_steps_list}{}}}
\subsection{Method \code{get_steps_list()}}{
Return the internal list of step specifications
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{lna_pipeline$get_steps_list()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-lna_pipeline-steps"></a>}}
\if{latex}{\out{\hypertarget{method-lna_pipeline-steps}{}}}
\subsection{Method \code{steps()}}{
Convenience accessor for the internal step list
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{lna_pipeline$steps()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-lna_pipeline-get_step"></a>}}
\if{latex}{\out{\hypertarget{method-lna_pipeline-get_step}{}}}
\subsection{Method \code{get_step()}}{
Retrieve a step specification by index or by type name. If a type
string is provided and occurs multiple times, the last matching step
is returned. Returns `NULL` if no matching step exists.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{lna_pipeline$get_step(index_or_type)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{index_or_type}}{Integer index or character type string}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-lna_pipeline-get_last_step_spec"></a>}}
\if{latex}{\out{\hypertarget{method-lna_pipeline-get_last_step_spec}{}}}
\subsection{Method \code{get_last_step_spec()}}{
Return the specification of the most recently added step, or `NULL`
if no steps have been added yet.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{lna_pipeline$get_last_step_spec()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-lna_pipeline-modify_step"></a>}}
\if{latex}{\out{\hypertarget{method-lna_pipeline-modify_step}{}}}
\subsection{Method \code{modify_step()}}{
Modify parameters of an existing step.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{lna_pipeline$modify_step(index_or_type, new_params_list)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{index_or_type}}{Integer index or type string identifying the step.}

\item{\code{new_params_list}}{Named list of parameter updates. `NULL` values
remove parameters and revert them to defaults/options.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-lna_pipeline-remove_step"></a>}}
\if{latex}{\out{\hypertarget{method-lna_pipeline-remove_step}{}}}
\subsection{Method \code{remove_step()}}{
Remove a step from the pipeline.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{lna_pipeline$remove_step(index_or_type)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{index_or_type}}{Integer index or type string identifying the step.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-lna_pipeline-insert_step"></a>}}
\if{latex}{\out{\hypertarget{method-lna_pipeline-insert_step}{}}}
\subsection{Method \code{insert_step()}}{
Insert a new step at a specific position.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{lna_pipeline$insert_step(
  step_spec,
  after_index_or_type = NULL,
  before_index_or_type = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{step_spec}}{Step specification list with `type` and `params`.}

\item{\code{after_index_or_type}}{Insert after this step. Mutually exclusive with
`before_index_or_type`.}

\item{\code{before_index_or_type}}{Insert before this step.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-lna_pipeline-validate_params"></a>}}
\if{latex}{\out{\hypertarget{method-lna_pipeline-validate_params}{}}}
\subsection{Method \code{validate_params()}}{
Validate all step parameters against their JSON schemas.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{lna_pipeline$validate_params(strict = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{strict}}{Logical flag. If `TRUE`, abort on the first validation
failure. If `FALSE` (default), collect all issues and return them.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-lna_pipeline-diagram"></a>}}
\if{latex}{\out{\hypertarget{method-lna_pipeline-diagram}{}}}
\subsection{Method \code{diagram()}}{
Produce a diagram of the pipeline.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{lna_pipeline$diagram(engine = c("grViz", "ascii", "dot"))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{engine}}{Output engine: one of "grViz", "ascii", or "dot".}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
DOT string, a `DiagrammeR` graph object, or ASCII text.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-lna_pipeline-clone"></a>}}
\if{latex}{\out{\hypertarget{method-lna_pipeline-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{lna_pipeline$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
