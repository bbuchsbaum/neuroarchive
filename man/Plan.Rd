% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plan.R
\name{Plan}
\alias{Plan}
\title{Plan Class for LNA Write Operations}
\description{
Defines the structure and operations for planning the write
  process of an LNA file, including dataset definitions, transform descriptors,
  and payload management.
}
\keyword{internal}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{datasets}}{A tibble storing definitions for HDF5 datasets to be created.}

\item{\code{descriptors}}{A list storing transform descriptor lists.}

\item{\code{payloads}}{A list storing data payloads to be written.}

\item{\code{next_index}}{An integer counter for naming transforms sequentially.}

\item{\code{origin_label}}{A string label identifying the source (e.g., run ID).}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Plan-new}{\code{Plan$new()}}
\item \href{#method-Plan-add_payload}{\code{Plan$add_payload()}}
\item \href{#method-Plan-add_dataset_def}{\code{Plan$add_dataset_def()}}
\item \href{#method-Plan-add_descriptor}{\code{Plan$add_descriptor()}}
\item \href{#method-Plan-get_next_filename}{\code{Plan$get_next_filename()}}
\item \href{#method-Plan-first_run_id}{\code{Plan$first_run_id()}}
\item \href{#method-Plan-import_from_array}{\code{Plan$import_from_array()}}
\item \href{#method-Plan-mark_payload_written}{\code{Plan$mark_payload_written()}}
\item \href{#method-Plan-clone}{\code{Plan$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Plan-new"></a>}}
\if{latex}{\out{\hypertarget{method-Plan-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new Plan object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Plan$new(origin_label = "global")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{origin_label}}{A string label for the origin (e.g., run ID).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Plan-add_payload"></a>}}
\if{latex}{\out{\hypertarget{method-Plan-add_payload}{}}}
\subsection{Method \code{add_payload()}}{
Add a data payload to be written later.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Plan$add_payload(key, value, overwrite = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{Character string identifier (often HDF5 path).}

\item{\code{value}}{The R object to be written.}

\item{\code{overwrite}}{Logical flag; if `TRUE`, an existing payload with the
same key will be replaced. Defaults to `FALSE` which raises an error on
duplicates.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Plan-add_dataset_def"></a>}}
\if{latex}{\out{\hypertarget{method-Plan-add_dataset_def}{}}}
\subsection{Method \code{add_dataset_def()}}{
Add a definition for an HDF5 dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Plan$add_dataset_def(
  path,
  role,
  producer,
  origin,
  step_index,
  params_json,
  payload_key,
  write_mode
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{Character string, HDF5 path for the dataset.}

\item{\code{role}}{Character string, semantic role of the dataset.}

\item{\code{producer}}{Character string, type of the transform producing this.}

\item{\code{origin}}{Character string, label of the originating run/source.}

\item{\code{step_index}}{Integer, index of the transform step.}

\item{\code{params_json}}{Character string, JSON representation of transform params.}

\item{\code{payload_key}}{Character string, key linking to the entry in `self$payloads`.}

\item{\code{write_mode}}{Character string, requested write mode ("eager"/"stream").}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Plan-add_descriptor"></a>}}
\if{latex}{\out{\hypertarget{method-Plan-add_descriptor}{}}}
\subsection{Method \code{add_descriptor()}}{
Add a transform descriptor to the plan.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Plan$add_descriptor(transform_name, desc_list)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{transform_name}}{Character string, name for the descriptor (e.g., "00_type.json").}

\item{\code{desc_list}}{List, the descriptor content.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Plan-get_next_filename"></a>}}
\if{latex}{\out{\hypertarget{method-Plan-get_next_filename}{}}}
\subsection{Method \code{get_next_filename()}}{
Get the next sequential filename prefix for a transform descriptor.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Plan$get_next_filename(type)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{Character string, the transform type.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Character string (e.g., "00_type.json").
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Plan-first_run_id"></a>}}
\if{latex}{\out{\hypertarget{method-Plan-first_run_id}{}}}
\subsection{Method \code{first_run_id()}}{
Return the first run identifier appearing in the plan. If no dataset
definitions exist, fall back to `origin_label` when it matches the run
pattern. Returns `NULL` when no run information is available.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Plan$first_run_id()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Plan-import_from_array"></a>}}
\if{latex}{\out{\hypertarget{method-Plan-import_from_array}{}}}
\subsection{Method \code{import_from_array()}}{
Convenience helper to add an array as the initial payload for a run.
This is used by `core_write` when no transforms are specified.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Plan$import_from_array(x, run_id = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{Array to add.}

\item{\code{run_id}}{Optional run identifier. Defaults to "run-01" when neither
`run_id` nor `origin_label` specifies a run pattern.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Plan-mark_payload_written"></a>}}
\if{latex}{\out{\hypertarget{method-Plan-mark_payload_written}{}}}
\subsection{Method \code{mark_payload_written()}}{
Mark a payload as written (e.g., by setting its value to NULL).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Plan$mark_payload_written(key)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{Character string, the key of the payload to mark.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Plan-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Plan-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Plan$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
