% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/experimental_api.R
\name{fmri_workflow}
\alias{fmri_workflow}
\title{Complete fMRI preprocessing and compression workflow}
\usage{
fmri_workflow(
  data,
  mask = NULL,
  TR = 2,
  study_type = c("resting", "task", "event"),
  workflow = c("compress", "denoise", "full"),
  compression_target = 10,
  denoise_level = c("conservative", "moderate", "aggressive"),
  return_intermediate = FALSE,
  verbose = TRUE
)
}
\arguments{
\item{data}{Matrix with time in rows, voxels in columns}

\item{mask}{LogicalNeuroVol defining spatial structure (for spatial transforms)}

\item{TR}{Repetition time in seconds (for temporal transforms)}

\item{study_type}{Type of fMRI study: "resting", "task", "event"}

\item{workflow}{Type of workflow:
\itemize{
  \item \code{"compress"}: Temporal + spatial compression
  \item \code{"denoise"}: Temporal denoising + compression  
  \item \code{"full"}: Complete preprocessing pipeline
}}

\item{compression_target}{Target compression ratio (default: 10)}

\item{denoise_level}{Denoising aggressiveness: "conservative", "moderate", "aggressive"}

\item{return_intermediate}{Return intermediate results for inspection (default: FALSE)}

\item{verbose}{Print progress and recommendations (default: TRUE)}
}
\value{
List containing:
\itemize{
  \item \code{compressed_data}: Final compressed representation
  \item \code{compression_ratio}: Achieved compression ratio
  \item \code{parameters}: Parameters used for each transform
  \item \code{reconstruction_function}: Function to reconstruct original data
  \item \code{intermediate_results}: Intermediate outputs (if requested)
  \item \code{recommendations}: Suggestions for parameter optimization
}
}
\description{
High-level function that combines multiple neuroarchive transforms
for a complete fMRI preprocessing and compression workflow. This
function automatically suggests optimal parameters based on data
characteristics and study type.
}
\examples{
\donttest{
# Create example fMRI data and mask
library(neuroim2)
set.seed(123)

# Simulate 64x64x20 brain with 300 timepoints, TR=2s
dims <- c(64, 64, 20)
mask_array <- array(TRUE, dims)
# Create a brain-like mask (remove edges)
mask_array[1:5, , ] <- FALSE
mask_array[60:64, , ] <- FALSE
mask_array[, 1:5, ] <- FALSE
mask_array[, 60:64, ] <- FALSE

mask <- LogicalNeuroVol(mask_array, NeuroSpace(dims, spacing = c(3, 3, 3)))
n_voxels <- sum(mask_array)

# Simulate fMRI data with realistic characteristics
fmri_data <- matrix(rnorm(300 * n_voxels, mean = 1000, sd = 50), 
                    nrow = 300, ncol = n_voxels)
# Add temporal drift
drift <- outer(1:300, rep(1, n_voxels)) * 0.5
fmri_data <- fmri_data + drift

# Conservative compression workflow for resting-state
result_rest <- fmri_workflow(
  fmri_data, mask, 
  TR = 2.0, 
  study_type = "resting",
  workflow = "compress",
  compression_target = 20,
  denoise_level = "conservative"
)

# Aggressive denoising workflow for task fMRI
result_task <- fmri_workflow(
  fmri_data, mask,
  TR = 2.0,
  study_type = "task", 
  workflow = "denoise",
  denoise_level = "moderate",
  return_intermediate = TRUE
)

# Full preprocessing pipeline
result_full <- fmri_workflow(
  fmri_data, mask,
  TR = 2.0,
  study_type = "event",
  workflow = "full",
  compression_target = 15
)

# Reconstruct data to check quality
reconstructed <- result_rest$reconstruction_function()
mse <- mean((fmri_data - reconstructed)^2)
cat("Compression ratio:", result_rest$compression_ratio, "\n")
cat("Reconstruction MSE:", mse, "\n")
}

}
